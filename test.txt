// dentro do index.js da pessoa usuária

const express = require('express');

const app = express();

const dynamicRoutes = require('dynamic-routes);

app.use(dynamicRoutes(endpoint, validation, table, query, rules));

parâmetros para criação de uma rota:

path,
lógica de validação (middleware)
nome do banco de dados (a conexão varia conforme o db)

// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('deucredito');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.

// Insert a few documents into the sales collection.
db.clientes.insertMany([
  // {nome: "Nicolas", sobrenome:"Ryberg"},
  // {nome: "Vitor", sobrenome:"Guimarães"},
]);

db.clientes.find();

// // Run a find command to view items sold on April 4th, 2014.
// db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// // Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// // Run the aggregation and open a cursor to the results.
// // Use toArray() to exhaust the cursor to return the whole result set.
// // You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);

